// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webapi_nextflow;

#nullable disable

namespace webapi_nextflow.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230811195045_complemento_01")]
    partial class complemento_01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("webapi_nextflow.Entity.ApprovalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("approval_type");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Conditional", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("expression");

                    b.HasKey("Id");

                    b.ToTable("conditional");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("events");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("WorkflowId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("workflow_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.GroupsUser", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("GroupId", "UserId");

                    b.ToTable("groups_user");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Hastags")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("hastags");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<int>("StageId")
                        .HasColumnType("int")
                        .HasColumnName("stage_id");

                    b.Property<string>("WorkflowId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("workflow_id");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("items");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.ParticipantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("Id");

                    b.ToTable("participant_type");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.SpecificStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("WorkflowId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("workflow_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("specific_status");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("WorkflowId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("workflow_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("stages");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.StatusFlowItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Approval")
                        .HasColumnType("bit")
                        .HasColumnName("approval");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<bool?>("Task")
                        .HasColumnType("bit")
                        .HasColumnName("task");

                    b.HasKey("Id");

                    b.ToTable("status_flow_items");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Task", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ApprovalTypeId")
                        .HasColumnType("int")
                        .HasColumnName("approval_type_id");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<int>("ParticipantTypeId")
                        .HasColumnType("int")
                        .HasColumnName("participant_type_id");

                    b.Property<int>("SpecificStatusId")
                        .HasColumnType("int")
                        .HasColumnName("specific_status_id");

                    b.Property<string>("SpecificUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("specific_user");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int")
                        .HasColumnName("time_limit");

                    b.Property<string>("TimeLimitType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("time_limit_type");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalTypeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParticipantTypeId");

                    b.HasIndex("SpecificStatusId");

                    b.ToTable("task");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Transition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentItem")
                        .HasColumnType("int")
                        .HasColumnName("current_item");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<int>("NextItem")
                        .HasColumnType("int")
                        .HasColumnName("next_item");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("NextItem");

                    b.HasIndex("CurrentItem", "NextItem", "EventId")
                        .IsUnique();

                    b.ToTable("transition");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Voting", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("id");

                    b.Property<bool?>("ActivateVoting")
                        .HasColumnType("bit")
                        .HasColumnName("activate_voting");

                    b.Property<bool?>("CloseVoting")
                        .HasColumnType("bit")
                        .HasColumnName("close_voting");

                    b.Property<DateTime?>("EndDateVote")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date_vote");

                    b.Property<DateTime?>("StartDateVote")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date_vote");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.HasKey("Id");

                    b.ToTable("voting");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.WorkFlowItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<bool?>("EvaluatedVote")
                        .HasColumnType("bit")
                        .HasColumnName("evaluated_vote");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("object");

                    b.Property<DateTime>("StarDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("star_date");

                    b.Property<int>("StatusItemFlowId")
                        .HasColumnType("int")
                        .HasColumnName("status_item_flow_id");

                    b.Property<int>("TransitionId")
                        .HasColumnType("int")
                        .HasColumnName("transition_id");

                    b.Property<string>("VotingId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("voting_id");

                    b.HasKey("Id");

                    b.HasIndex("StatusItemFlowId");

                    b.HasIndex("VotingId");

                    b.ToTable("work_flow_items");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Workflow", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("description");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("owner");

                    b.HasKey("Id");

                    b.ToTable("workflows");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Conditional", b =>
                {
                    b.HasOne("webapi_nextflow.Entity.Item", "IdNavigation")
                        .WithOne("Conditional")
                        .HasForeignKey("webapi_nextflow.Entity.Conditional", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Group", b =>
                {
                    b.HasOne("webapi_nextflow.Entity.Workflow", "Workflow")
                        .WithMany("Groups")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.GroupsUser", b =>
                {
                    b.HasOne("webapi_nextflow.Entity.Group", "Group")
                        .WithMany("GroupsUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Item", b =>
                {
                    b.HasOne("webapi_nextflow.Entity.Stage", "Stage")
                        .WithMany("Items")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi_nextflow.Entity.Workflow", "Workflow")
                        .WithMany("Items")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.SpecificStatus", b =>
                {
                    b.HasOne("webapi_nextflow.Entity.Workflow", "Workflow")
                        .WithMany("SpecificStatuses")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Stage", b =>
                {
                    b.HasOne("webapi_nextflow.Entity.Workflow", "Workflow")
                        .WithMany("Stages")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Task", b =>
                {
                    b.HasOne("webapi_nextflow.Entity.ApprovalType", "ApprovalType")
                        .WithMany("Tasks")
                        .HasForeignKey("ApprovalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi_nextflow.Entity.Group", "Group")
                        .WithMany("Tasks")
                        .HasForeignKey("GroupId");

                    b.HasOne("webapi_nextflow.Entity.Item", "Item")
                        .WithOne("Task")
                        .HasForeignKey("webapi_nextflow.Entity.Task", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi_nextflow.Entity.ParticipantType", "ParticipantType")
                        .WithMany("Tasks")
                        .HasForeignKey("ParticipantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi_nextflow.Entity.SpecificStatus", "SpecificStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("SpecificStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalType");

                    b.Navigation("Group");

                    b.Navigation("Item");

                    b.Navigation("ParticipantType");

                    b.Navigation("SpecificStatus");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Transition", b =>
                {
                    b.HasOne("webapi_nextflow.Entity.Item", "CurrentItemNavigation")
                        .WithMany()
                        .HasForeignKey("CurrentItem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi_nextflow.Entity.Event", "Event")
                        .WithMany("Transitions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi_nextflow.Entity.Item", "NextItemNavigation")
                        .WithMany()
                        .HasForeignKey("NextItem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentItemNavigation");

                    b.Navigation("Event");

                    b.Navigation("NextItemNavigation");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.WorkFlowItem", b =>
                {
                    b.HasOne("webapi_nextflow.Entity.StatusFlowItem", "StatusItemFlow")
                        .WithMany("WorkFlowItems")
                        .HasForeignKey("StatusItemFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi_nextflow.Entity.Voting", "Voting")
                        .WithMany("WorkFlowItems")
                        .HasForeignKey("VotingId");

                    b.Navigation("StatusItemFlow");

                    b.Navigation("Voting");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.ApprovalType", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Event", b =>
                {
                    b.Navigation("Transitions");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Group", b =>
                {
                    b.Navigation("GroupsUsers");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Item", b =>
                {
                    b.Navigation("Conditional");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.ParticipantType", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.SpecificStatus", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Stage", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.StatusFlowItem", b =>
                {
                    b.Navigation("WorkFlowItems");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Voting", b =>
                {
                    b.Navigation("WorkFlowItems");
                });

            modelBuilder.Entity("webapi_nextflow.Entity.Workflow", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Items");

                    b.Navigation("SpecificStatuses");

                    b.Navigation("Stages");
                });
#pragma warning restore 612, 618
        }
    }
}
